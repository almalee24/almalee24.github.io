---
layout: post
title:      "GitHub Jobs Api Project"
date:       2020-09-11 13:43:12 +0000
permalink:  github_jobs_api_project
---


Building my CLI project was challenging and extremely rewarding. It was exciting to see everything from the last couple of weeks coming together. With the ups and downs of this project, classes and methods finally made some sense. I hit a huge roadblock the first time being introduced to class relationships but this project cleared everything up. For my CLI project, I  used Github Jobs API to make an interactive job database. 
	The Github Job API doesnâ€™t require you to register for a developer key, making it readily accessible to everyone. My first hurdle was figuring out a way to access the data provided by this open-source database. I realized the first step to access this information is through a GET request and then parsing it through a few different gems. This former step allows us to use this data in our ruby code and put it in classes and methods. I ended up with four different classes in my project, API, CLI, Cart, and Position.  The API class was in charge of grabbing the information from the API. I did this through two instance methods, positions_description, and positions_location. The CLI class was in charge of displaying and receiving input from the user.  Depending on the input of the user the CLI class would send it to one of the instance methods in the API class. This instance method would grab the appropriate jobs and send them to the Position class. This class was in charge of holding all the positions and initializing them. The final class was the Cart class and this one was in charge of holding jobs that the user wanted to apply to. This whole project ended up being highly interactive for the user and worked seamlessly.
	Throughout the project, I did run into a few hiccups that I was able to fix and it helped improve my code. The first hiccup was figuring out how to correctly use parameters to parse through my code correctly. My initial way of doing was using each method to loop through the description key to see if it included a particular location or description. The first big problem is it didn't work, I would input a parameter and it wouldn't give me an output and if it did sometimes it was incorrect or didn't match the parameter.  The second big problem is that it takes to long to go through each job description.  So my solution was to create two instance methods that would take this input and used it as a parameter directly in the URL. This worked perfectly and seamlessly.  My second big hiccup was the cart. I wanted the user to be able to put jobs they like into a cart. They would be able to go back to the cart look at all the jobs and be able to apply to them by an URL provided.  My first thought was to create a cart hash and method in the CLI class. This didn't work I wished because the cart hash wouldn't output anything when called. Also, this would create more work the CLI class is meant to do.   Therefore, my solution was to create a different class and that worked beautifully. The user would be able to add a job through the CLI class that would then add it into the cart class and then would call the cart class again to output information.
	I enjoyed this project, it had so many running parts, and I felt overwhelmed at first but it quickly became enjoyable. One of my favorite parts was using colorize and Ascii text art. This made my project more visually appealing to my users. I was able to create a useful program that is highly interactive and helps the user narrow down job positions. 
